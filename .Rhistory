render_report(year_start,year_end, filterspecies,filterstations,species,stations)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
# load packages
library(pacman)
p_load(purrr, readxl,lubridate,tidyverse,here,ggnewscale,gridExtra,dbscan,sf,
mapdata, marmap, ggspatial, ggpattern, ggrepel, maps, kableExtra, tinytex,
flextable, RColorBrewer,xlsx,crul,stringr,readr,ftExtra, cowplot)
# set dplyr not to display 'summarise' messages
options(dplyr.summarise.inform = FALSE)
fig_counter <- 0
tab_counter <- 0
## Metadata ----
metadata.input<-read.csv(r"(R:\Science\CetaceanOPPNoise\CetaceanOPPNoise_2\PAM_metadata\deployment_summary.csv)", header= TRUE)
years <- c(as.numeric(params$year_start):as.numeric(params$year_end))
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
# load packages
library(pacman)
p_load(purrr, readxl,lubridate,tidyverse,here,ggnewscale,gridExtra,dbscan,sf,
mapdata, marmap, ggspatial, ggpattern, ggrepel, maps, kableExtra, tinytex,
flextable, RColorBrewer,xlsx,crul,stringr,readr,ftExtra, cowplot)
# set dplyr not to display 'summarise' messages
options(dplyr.summarise.inform = FALSE)
fig_counter <- 0
tab_counter <- 0
## Metadata ----
metadata.input<-read.csv(r"(R:\Science\CetaceanOPPNoise\CetaceanOPPNoise_2\PAM_metadata\deployment_summary.csv)", header= TRUE)
years <- c(as.numeric(params$year_start):as.numeric(params$year_end))
metadata<-metadata.input%>%
rename_with(tolower) %>%
filter(year %in% years) %>% #only keep years of interest
mutate(rec_start = as_date(as.character(in.water_start))+1, #format date
rec_end = as_date(as.character(in.water_end))-1) %>% #format date
mutate(depth = round(depth_m,0),
recorder_type = gsub(" - .*", "", equipment.make_model_serial)) %>%
#extract station name
mutate(station_name = gsub("^[^:]+:|\\s*Revision.*", "", station)) %>%
# format deployments
mutate(deployment= str_replace_all(deployment, "-", "_"),
deployment = gsub('^(\\w{3,}_\\d{4}_\\d{2}).*','\\1', deployment)) %>%
# extract station code
mutate(station= str_extract(deployment, "^[^_]+")) %>%
filter(if(params$filterstation) station %in% params$stations else TRUE) %>%
mutate(station_name= paste0(station_name, " (",station,")")) %>%
select(c(station, deployment, station_name, latitude, longitude, rec_start, rec_end, depth, recorder_type)) %>% #remove unneeded columns
drop_na()
## Order of Stations ----
stations.input <- read.csv(r"(R:\Science\CetaceanOPPNoise\CetaceanOPPNoise_2\PAM_metadata\mooring_stations.csv)", header= TRUE)
stations <- stations.input %>%
rename_with(tolower) %>%
select(station, lat, lon)
# Compute clusters based on spatial proximity (DBSCAN)
coordinates <- stations[, c("lon", "lat")]
cluster <- dbscan(coordinates, eps = 1, minPts = 1)  # You may need to adjust eps and minPts based on your data
# Calculate the average latitude and longitude for each cluster
cluster_centers <- aggregate(coordinates, by=list(cluster$cluster), FUN=mean) %>%
arrange(lon, lat)
# Reassign cluster labels based on the new order
cluster$cluster <- match(cluster$cluster, cluster_centers$Group.1)
# Add cluster labels back to stations
stations$cluster <- cluster$cluster
# Function to order stations within each cluster
order_within_cluster <- function(cluster_id) {
cluster_stations <- stations[stations$cluster == cluster_id, ]
ordered_cluster_stations <- cluster_stations[order(cluster_stations$lat, cluster_stations$lon), ]
ordered_cluster_stations$order <- 1:nrow(ordered_cluster_stations)
return(ordered_cluster_stations)
}
# Order stations within each cluster
Station.Order <- do.call(rbind, lapply(unique(cluster$cluster), order_within_cluster)) %>%
mutate(cluster = case_when(cluster == 7 ~11,
cluster == 9 ~ 7,
cluster == 8 ~ 10,
cluster == 11 ~ 8,
cluster == 10 ~ 9,
TRUE ~ cluster)) %>%
arrange(cluster,order) %>%
pull(station)
## Missing dates from deployments ----
missing.days <- read.csv(r"(R:\Science\CetaceanOPPNoise\CetaceanOPPNoise_2\PAM_metadata\missing_dates.csv)", header= TRUE) %>%
mutate(deployment = str_replace_all(deployment,"-","_")) %>%
mutate(station= str_extract(deployment, "^[^_]+")) %>%
mutate(start_missing= as_date(as.character(start_missing)),
end_missing= as_date(as.character(end_missing))) %>%
rowwise() %>%
mutate(miss_days = list(seq.Date(start_missing, end_missing, by = "day"))) %>%
unnest(cols=c(miss_days)) %>%
ungroup() %>%
select(station, miss_days)
## Find all recording dates ----
# find all dates with recording effort
rec.days <- metadata %>%
select(station, rec_start, rec_end) %>%
rowwise() %>%
mutate(rec_days = list(seq.Date(as_date(rec_start), as_date(rec_end), by = "day"))) %>%
unnest(cols=c(rec_days)) %>%
ungroup() %>%
anti_join(missing.days, by=c(c("station"), c("rec_days"="miss_days"))) %>%
mutate(month = month(rec_days),
season= case_when((month == 3|month == 4| month==5) ~ 'SPRING',
(month == 6|month == 7|month == 8) ~ 'SUMMER',
(month == 9|month == 10|month == 11)~ 'FALL',
(month == 12|month == 1|month == 2) ~ 'WINTER'))
## Find all non-recording dates ----
# function to find start and end dates of no recording periods
detect_consecutive_intervals <- function(dates) {
if (length(dates) <= 1) return(data.frame(start_date = dates[1], end_date = dates[1]))
intervals <- split(dates, cumsum(c(TRUE, diff(dates) != 1)))
intervals <- lapply(intervals, function(x) data.frame(start_date = min(x), end_date = max(x)))
return(do.call(rbind, intervals))
}
# find all dates within effort years
all.days <- metadata %>%
select(station) %>%
rowwise() %>%
mutate(all_days = list(seq.Date(as_date(paste(years[1], "01", "01", sep = "-")),as_date(paste(years[length(years)]+1, "12", "31", sep = "-")), by = "day"))) %>%
unnest(cols=c(all_days)) %>%
ungroup()
# find the dates with no recording effort
no.rec.dates <- all.days %>%
anti_join(rec.days, by = c(c("station", c("all_days"="rec_days")))) %>%
group_by(station) %>%
summarize(consecutive_intervals = list(detect_consecutive_intervals(all_days))) %>%
unnest(cols = c(consecutive_intervals)) %>%
distinct()
# figure out a darker colour for error bars
darken_color <- function(color, factor = 0.8) {
# Convert hex color to RGB
rgb_vals <- col2rgb(color)
# Darken each RGB component
darkened_rgb <- rgb_vals * factor
# Ensure values are within valid range (0-255)
darkened_rgb <- pmax(darkened_rgb, 0)
darkened_rgb <- pmin(darkened_rgb, 255)
# Convert back to hex
darkened_hex <- rgb(darkened_rgb[1, ], darkened_rgb[2, ], darkened_rgb[3, ], maxColorValue = 255)
return(darkened_hex)
}
## Whale Presence Input  ----
call.cats <- c("IS","A","IF","FF","MO","UP","PT")
# Set the path to your main folder
main_folder <- r"(R:\Science\CetaceanOPPNoise\CetaceanOPPNoise_5\BaleenWhale_AcousticAnalysis\Deployments)" # direct to all deployments
# List all subfolders
subfolders <- list.files(main_folder, full.names = TRUE) #list all subfolders (aka Validation, Results)
if (params$filterstations){
subfolders <- subfolders %>% grep(paste(params$stations, collapse = "|"),., value = TRUE)
}
# Initialize an empty list to store dataframes
dfs <- list()
# Iterate over each subfolder, read the CSV files, and combine into a single dataframe
for (subfolder in subfolders) {
# Extract fruit name from the subfolder name
deployment <- basename(subfolder) #extract deployment name
# Read the CSV file
csv_file <- list.files(paste0(subfolders,"\\Results\\"), pattern = paste0(deployment, "_baleenwhale_dailypresence.csv"), #find the presence csv
full.names = TRUE)
df <- read_csv(csv_file) #read presence csv
df$deployment <- deployment
df<- df %>%
mutate(deployment = deployment,
station = str_extract(deployment, "^[^_]+")) %>%
relocate(station,deployment)
# Store the dataframe in the list
dfs[[length(dfs) + 1]] <- df
}
data.input <- do.call(rbind, dfs)
species.data <- data.input %>%
filter(presence == "D") %>%   # filters for definite presence
filter(year(detecdate)>=min(years)& year(detecdate)<=max(years)) %>%
filter(if (params$filterspecies) species %in% params$species else TRUE) %>%   # filters for species of %>% # filters for species of interest
select(!calltype) %>%
mutate(callcat = case_when(callcat == "NS"~"MO",
callcat == "SG"~"MO", .default =callcat)) %>%
filter(callcat %in% call.cats) %>%  #filters for wanted call category
distinct() %>%
mutate(spcallgroup_label = case_when((species== "Bm" & callcat == "IF")~"Blue whale (tonal calls)",
(species== "Bm" & callcat == "A")~"Blue whale (audible calls)",
(species== "Bp" & callcat == "IS")~"Fin whale (20Hz calls)",
(species== "Bb" & callcat == "FF")~"Sei whale (full frequency downsweep calls)",
(species== "Mn")                  ~"Humpback whale (all calls)",
(species== "Eg" & callcat == "U")~"North Atlantic right whale (upcalls)",
(species== "Ba" & callcat == "P")~"Minke whale (pulse trains)")) %>%
mutate(spcallgroup = case_when(species=='Bm' & callcat=="IF" ~ 'BW_IF_all',
species=="Bm" & callcat=='A' ~ 'BW_A_all',
species=='Bp' & callcat=='IS' ~ 'FW_IS_D',
species=='Bb' & callcat=='FF' ~ 'SW_FF_all',
species=='Mn' ~ 'HB_all',
species=='Eg' & callcat=='UP'~ 'RW_UP_U',
species=="Ba"~ 'MW_all'))
## Map prep ----
# read in shapefiles
MPAs<-read_sf(r"(R:\Science\CetaceanOPPNoise\CetaceanOPPNoise_2\shapefiles\ProtectedAreas\DFO\OA_MPAs\EastCan_MPAS.shp)")
canada <- read_sf("R:/Science/CetaceanOPPNoise/CetaceanOPPNoise_2/shapefiles/coastline/canada/clipped/canada_simple.shp") %>%
st_transform(4326)
north.america <- read_sf("R:/Science/CetaceanOPPNoise/CetaceanOPPNoise_2/shapefiles/coastline/north_america/north_america.shp") %>%
st_transform(4326)
#read in bathymetry
bf = readRDS(r"(R:\Science\CetaceanOPPNoise\CetaceanOPPNoise_2\bathymetry\baleenwhale\bathymetry.RDS)")
## Map that ----
if(params$filterstations){
stations.for.map <- stations %>% filter(station %in% params$stations)
station.map <-ggplot() +
# add bathymetry
geom_raster(data=bf, aes(x=x, y=y, fill=z)) +
scale_fill_distiller(palette="Blues",guide = 'none') +
# add land region
geom_sf(data = canada, color=NA, fill="grey60") +
# add MPAs
geom_sf(data=MPAs, color= NA, fill="darkred", alpha=0.3) +
# add stations
geom_point(data= stations.for.map, aes(x = lon, y = lat), colour="black", fill = "black", shape=17, size = 1, stroke = 2)+
geom_text(data= stations.for.map, aes(x=lon, y=lat, label = station), nudge_y =  -0.1) +
#finish up
coord_sf(ylim = c(round(min(stations.for.map$lat)-1,0), round(max(stations.for.map$lat)+1,0)),
xlim = c(round(min(stations.for.map$lon)-1,0), round(max(stations.for.map$lon)+1,0)), expand = FALSE) +
ylab("") +
xlab("") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background =element_rect(fill="white", colour = "black"),
text = element_text(size = 12),
legend.key = element_rect(fill = NA),
plot.margin = margin(0.3,0.1,0.1,0.1,"cm"),
panel.spacing.x = unit(1, "lines"))
map.full <-ggplot() +
# add bathymetry
geom_raster(data=bf, aes(x=x, y=y, fill=z)) +
scale_fill_distiller(palette="Blues",guide = 'none') +
# add land region
geom_sf(data = canada, color=NA, fill="grey60") +
# add MPAs
geom_sf(data=MPAs, color= NA, fill="darkred", alpha=0.3) +
#add zoom rectangle
geom_rect(aes(xmin = round(min(stations.for.map$lon)-1,0), xmax = round(max(stations.for.map$lon)+1,0),
ymin = round(min(stations.for.map$lat)-1,0), ymax = round(max(stations.for.map$lat)+1,0)),
color = "red", fill = NA)+
#finish up
coord_sf(xlim = c(-68, -55), ylim = c(39, 47.5), expand = FALSE) +
# ylab("") +
xlab("") +
theme_void()+
theme(plot.background = element_rect(color = "black", size = 2),
plot.margin = margin(1, 1, 1, 1, unit = "pt"),
legend.key = element_rect(fill = NA))
station_inset_map <- ggdraw() +
draw_plot(station.map) +
draw_plot(map.full, x = 0.9, y = 0.15, width = 0.3, height = 0.3)
station_inset_map
} else {
#get stations for mapping
stations.for.map <- stations %>%
select(station, lat, lon) %>%
filter(station %in% species.data$station)
ggplot() +
# add bathymetry
geom_raster(data=bf, aes(x=x, y=y, fill=z)) +
scale_fill_distiller(palette="Blues",guide = 'none') +
# add land region
geom_sf(data = canada, color=NA, fill="grey60") +
# add NARW CH shapefile
geom_sf(data=MPAs, color= NA, fill="darkred", alpha=0.3) +
# add stations
geom_point(data= stations.for.map, aes(x = lon, y = lat), colour="black", fill = "black", shape=17, size = 1, stroke = 2)+
geom_text(data= stations.for.map, aes(x=lon, y=lat, label = station), nudge_y =  -0.2) +
#finish up
coord_sf(xlim = c(-72, -53), ylim = c(40, 48), expand = FALSE) +
ylab("") +
xlab("") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background =element_rect(fill="white", colour = "black"),
text = element_text(size = 12),
legend.key = element_rect(fill = NA),
plot.margin = margin(0.3,0.1,0.1,0.1,"cm"),
panel.spacing.x = unit(1, "lines"))
}
if(params$filterstations){
stations.for.map <- stations %>% filter(station %in% params$stations)
station.map <-ggplot() +
# add bathymetry
geom_raster(data=bf, aes(x=x, y=y, fill=z)) +
scale_fill_distiller(palette="Blues",guide = 'none') +
# add land region
geom_sf(data = canada, color=NA, fill="grey60") +
# add MPAs
geom_sf(data=MPAs, color= NA, fill="darkred", alpha=0.3) +
# add stations
geom_point(data= stations.for.map, aes(x = lon, y = lat), colour="black", fill = "black", shape=17, size = 1, stroke = 2)+
geom_text(data= stations.for.map, aes(x=lon, y=lat, label = station), nudge_y =  -0.1) +
#finish up
coord_sf(ylim = c(round(min(stations.for.map$lat)-1,0), round(max(stations.for.map$lat)+1,0)),
xlim = c(round(min(stations.for.map$lon)-1,0), round(max(stations.for.map$lon)+1,0)), expand = FALSE) +
ylab("") +
xlab("") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background =element_rect(fill="white", colour = "black"),
text = element_text(size = 12),
legend.key = element_rect(fill = NA),
plot.margin = margin(0.3,0.1,0.1,0.1,"cm"),
panel.spacing.x = unit(1, "lines"))
map.full <-ggplot() +
# add bathymetry
geom_raster(data=bf, aes(x=x, y=y, fill=z)) +
scale_fill_distiller(palette="Blues",guide = 'none') +
# add land region
geom_sf(data = canada, color=NA, fill="grey60") +
# add MPAs
geom_sf(data=MPAs, color= NA, fill="darkred", alpha=0.3) +
#add zoom rectangle
geom_rect(aes(xmin = round(min(stations.for.map$lon)-1,0), xmax = round(max(stations.for.map$lon)+1,0),
ymin = round(min(stations.for.map$lat)-1,0), ymax = round(max(stations.for.map$lat)+1,0)),
color = "red", fill = NA)+
#finish up
coord_sf(xlim = c(-68, -55), ylim = c(39, 47.5), expand = FALSE) +
# ylab("") +
xlab("") +
theme_void()+
theme(plot.background = element_rect(color = "black", size = 2),
plot.margin = margin(1, 1, 1, 1, unit = "pt"),
legend.key = element_rect(fill = NA))
station_inset_map <- ggdraw() +
draw_plot(station.map) +
draw_plot(map.full, x = 0.9, y = 0.15, width = 0.3, height = 0.3)
station_inset_map
} else {
#get stations for mapping
stations.for.map <- stations %>%
select(station, lat, lon) %>%
filter(station %in% species.data$station)
ggplot() +
# add bathymetry
geom_raster(data=bf, aes(x=x, y=y, fill=z)) +
scale_fill_distiller(palette="Blues",guide = 'none') +
# add land region
geom_sf(data = canada, color=NA, fill="grey60") +
# add NARW CH shapefile
geom_sf(data=MPAs, color= NA, fill="darkred", alpha=0.3) +
# add stations
geom_point(data= stations.for.map, aes(x = lon, y = lat), colour="black", fill = "black", shape=17, size = 1, stroke = 2)+
geom_text(data= stations.for.map, aes(x=lon, y=lat, label = station), nudge_y =  -0.2) +
#finish up
coord_sf(xlim = c(-72, -53), ylim = c(40, 48), expand = FALSE) +
ylab("") +
xlab("") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background =element_rect(fill="white", colour = "black"),
text = element_text(size = 12),
legend.key = element_rect(fill = NA),
plot.margin = margin(0.3,0.1,0.1,0.1,"cm"),
panel.spacing.x = unit(1, "lines"))
}
stations.for.map <- stations %>% filter(station %in% params$stations)
station.map <-ggplot() +
# add bathymetry
geom_raster(data=bf, aes(x=x, y=y, fill=z)) +
scale_fill_distiller(palette="Blues",guide = 'none') +
# add land region
geom_sf(data = canada, color=NA, fill="grey60") +
# add MPAs
geom_sf(data=MPAs, color= NA, fill="darkred", alpha=0.3) +
# add stations
geom_point(data= stations.for.map, aes(x = lon, y = lat), colour="black", fill = "black", shape=17, size = 1, stroke = 2)+
geom_text(data= stations.for.map, aes(x=lon, y=lat, label = station), nudge_y =  -0.1) +
#finish up
coord_sf(ylim = c(round(min(stations.for.map$lat)-1,0), round(max(stations.for.map$lat)+1,0)),
xlim = c(round(min(stations.for.map$lon)-1,0), round(max(stations.for.map$lon)+1,0)), expand = FALSE) +
ylab("") +
xlab("") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background =element_rect(fill="white", colour = "black"),
text = element_text(size = 12),
legend.key = element_rect(fill = NA),
plot.margin = margin(0.3,0.1,0.1,0.1,"cm"),
panel.spacing.x = unit(1, "lines"))
map.full <-ggplot() +
# add bathymetry
geom_raster(data=bf, aes(x=x, y=y, fill=z)) +
scale_fill_distiller(palette="Blues",guide = 'none') +
# add land region
geom_sf(data = canada, color=NA, fill="grey60") +
# add MPAs
geom_sf(data=MPAs, color= NA, fill="darkred", alpha=0.3) +
#add zoom rectangle
geom_rect(aes(xmin = round(min(stations.for.map$lon)-1,0), xmax = round(max(stations.for.map$lon)+1,0),
ymin = round(min(stations.for.map$lat)-1,0), ymax = round(max(stations.for.map$lat)+1,0)),
color = "red", fill = NA)+
#finish up
coord_sf(xlim = c(-68, -55), ylim = c(39, 47.5), expand = FALSE) +
# ylab("") +
xlab("") +
theme_void()+
theme(plot.background = element_rect(color = "black", size = 2),
plot.margin = margin(1, 1, 1, 1, unit = "pt"),
legend.key = element_rect(fill = NA))
station_inset_map <- ggdraw() +
draw_plot(station.map) +
draw_plot(map.full, x = 0.9, y = 0.15, width = 0.3, height = 0.3)
station_inset_map <- ggdraw() +
draw_plot(station.map) +
draw_plot(map.full, x = 0.7, y = 0.15, width = 0.3, height = 0.3)
station_inset_map
ggplot() +
# add bathymetry
geom_raster(data=bf, aes(x=x, y=y, fill=z)) +
scale_fill_distiller(palette="Blues",guide = 'none') +
# add land region
geom_sf(data = canada, color=NA, fill="grey60") +
# add MPAs
geom_sf(data=MPAs, color= NA, fill="darkred", alpha=0.3) +
# add stations
geom_point(data= stations.for.map, aes(x = lon, y = lat), colour="black", fill = "black", shape=17, size = 1, stroke = 2)+
geom_text(data= stations.for.map, aes(x=lon, y=lat, label = station), nudge_y =  -0.1) +
#finish up
coord_sf(ylim = c(round(min(stations.for.map$lat)-1,0), round(max(stations.for.map$lat)+1,0)),
xlim = c(round(min(stations.for.map$lon)-1,0), round(max(stations.for.map$lon)+1,0)), expand = FALSE) +
ylab("") +
xlab("") +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
strip.background =element_rect(fill="white", colour = "black"),
text = element_text(size = 12),
legend.key = element_rect(fill = NA),
plot.margin = margin(0.3,0.1,0.1,0.1,"cm"),
panel.spacing.x = unit(1, "lines"))
ggplot() +
# add bathymetry
geom_raster(data=bf, aes(x=x, y=y, fill=z)) +
scale_fill_distiller(palette="Blues",guide = 'none')
stations %>% filter(station %in% params$stations)
# required:
year_start = 2017
year_end = 2022
filterspecies = FALSE
filterstations = TRUE
# if filterspecies TRUE
# Blue whale = Bm   Fin whale = Bp  Sei whale = Bb  Humpback whale = Mn  NA Right whale = Eg   Minke whale = Ba
species = c("")         # use format c("","")
#if filterstations TRUE
stations = c("DAC","COC","CS1")    # use format c("","")
# render report based on parameters set above
render_report(year_start,year_end, filterspecies,filterstations,species,stations)
# render report based on parameters set above
render_report(year_start,year_end, filterspecies,filterstations,species,stations)
# render report based on parameters set above
render_report(year_start,year_end, filterspecies,filterstations,species,stations)
test <- c(2017:2023)
test-1
[-length(test)]
-length(test)
test[-length(test)]
################################################################################
# SET PARAMETERS
# required:
year_start = 2017           #Start year of interest
year_end = 2023             #End year of interest
filterspecies = FALSE
filterstations = TRUE
# if filterspecies TRUE
# Blue whale = Bm   Fin whale = Bp  Sei whale = Bb  Humpback whale = Mn  NA Right whale = Eg   Minke whale = Ba
species = c("")         # use format c("","")
#if filterstations TRUE
stations = c("DAC","COC","CS1")    # use format c("","")
################################################################################
# don't need to modify anything below
# define function
render_report = function(
year_start, year_end, filterspecies,filterstations,species,stations) {
rmarkdown::render(here("summary_report","baleenWhale_summary_report.Rmd"),
params = list(
year_start = year_start,
year_end = year_end,
filterspecies = filterspecies,
filterstations = filterstations,
species = species,
stations = stations
),
output_file = here(paste0("baleenwhale_summary_report_", Sys.Date(), ".docx")))
}
# render report based on parameters set above
render_report(year_start,year_end, filterspecies,filterstations,species,stations)
################################################################################
# SET PARAMETERS
# required:
year_start = 2017           #Start year of interest
year_end = 2023             #End year of interest
filterspecies = TRUE
filterstations = FALSE
# if filterspecies TRUE
# Blue whale = Bm   Fin whale = Bp  Sei whale = Bb  Humpback whale = Mn  NA Right whale = Eg   Minke whale = Ba
species = c("Bm")         # use format c("","")
#if filterstations TRUE
stations = c("")    # use format c("","")
################################################################################
# don't need to modify anything below
# define function
render_report = function(
year_start, year_end, filterspecies,filterstations,species,stations) {
rmarkdown::render(here("summary_report","baleenWhale_summary_report.Rmd"),
params = list(
year_start = year_start,
year_end = year_end,
filterspecies = filterspecies,
filterstations = filterstations,
species = species,
stations = stations
),
output_file = here(paste0("baleenwhale_summary_report_", Sys.Date(), ".docx")))
}
# render report based on parameters set above
render_report(year_start,year_end, filterspecies,filterstations,species,stations)
