"0","knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)"
"0",""
"0","# load packages"
"0",""
"0","library(pacman)"
"2","Warning: package ‘pacman’ was built under R version 4.3.3"
"0","p_load(purrr, readxl,lubridate,tidyverse,here,ggnewscale,gridExtra,dbscan,sf, "
"0","       mapdata, marmap, ggspatial, ggpattern, ggrepel, maps, kableExtra, tinytex, "
"0","       flextable, RColorBrewer,xlsx,crul,stringr,readr,ftExtra, cowplot)"
"0",""
"0","# set dplyr not to display 'summarise' messages"
"0",""
"0","options(dplyr.summarise.inform = FALSE)"
"0",""
"0","fig_counter <- 0"
"0","tab_counter <- 0"
"0",""
"0","## Metadata ----"
"0",""
"0","metadata.input<-read.csv(r""(R:\Science\CetaceanOPPNoise\CetaceanOPPNoise_2\PAM_metadata\deployment_summary.csv)"", header= TRUE)"
"0",""
"0","years <- c(as.numeric(params$year_start):as.numeric(params$year_end))"
"0","  "
"0","  metadata<-metadata.input%>%"
"0","    rename_with(tolower) %>%"
"0","    "
"0","    filter(year %in% years) %>% #only keep years of interest"
"0","    mutate(rec_start = as_date(as.character(in.water_start))+1, #format date"
"0","           rec_end = as_date(as.character(in.water_end))-1) %>% #format date"
"0","    "
"0","   "
"0","    mutate(depth = round(depth_m,0),"
"0","           recorder_type = gsub("" - .*"", """", equipment.make_model_serial)) %>% "
"0","    #extract station name"
"0","    mutate(station_name = gsub(""^[^:]+:|\\s*Revision.*"", """", station)) %>% "
"0","    "
"0","    # format deployments"
"0","    mutate(deployment= str_replace_all(deployment, ""-"", ""_""),"
"0","           deployment = gsub('^(\\w{3,}_\\d{4}_\\d{2}).*','\\1', deployment)) %>% "
"0","    "
"0","    # extract station code"
"0","    mutate(station= str_extract(deployment, ""^[^_]+"")) %>%"
"0","    filter(if(params$filterstation) station %in% params$stations else TRUE) %>% "
"0","    "
"0","    mutate(station_name= paste0(station_name, "" ("",station,"")"")) %>% "
"0","    "
"0","   select(c(station, deployment, station_name, latitude, longitude, rec_start, rec_end, depth, recorder_type)) %>% #remove unneeded columns"
"0","    "
"0","    drop_na()"
"0",""
"0","## Order of Stations ----"
"0",""
"0","stations.input <- read.csv(r""(R:\Science\CetaceanOPPNoise\CetaceanOPPNoise_2\PAM_metadata\mooring_stations.csv)"", header= TRUE) "
"0",""
"0","stations <- stations.input %>% "
"0","  rename_with(tolower) %>% "
"0","  select(station, lat, lon)"
"0",""
"0","  # Compute clusters based on spatial proximity (DBSCAN)"
"0","  coordinates <- stations[, c(""lon"", ""lat"")]"
"0","  "
"0","  cluster <- dbscan(coordinates, eps = 1, minPts = 1)  # You may need to adjust eps and minPts based on your data"
"0","  "
"0","  # Calculate the average latitude and longitude for each cluster"
"0","  cluster_centers <- aggregate(coordinates, by=list(cluster$cluster), FUN=mean) %>% "
"0","    arrange(lon, lat)"
"0","  "
"0","  # Reassign cluster labels based on the new order"
"0","  cluster$cluster <- match(cluster$cluster, cluster_centers$Group.1)"
"0","  "
"0","  # Add cluster labels back to stations"
"0","  stations$cluster <- cluster$cluster"
"0","  "
"0","  "
"0","  # Function to order stations within each cluster"
"0","  order_within_cluster <- function(cluster_id) {"
"0","    cluster_stations <- stations[stations$cluster == cluster_id, ]"
"0","    ordered_cluster_stations <- cluster_stations[order(cluster_stations$lat, cluster_stations$lon), ]"
"0","    ordered_cluster_stations$order <- 1:nrow(ordered_cluster_stations)"
"0","    return(ordered_cluster_stations)"
"0","  }"
"0","  "
"0","  # Order stations within each cluster"
"0","  Station.Order <- do.call(rbind, lapply(unique(cluster$cluster), order_within_cluster)) %>%"
"0","    mutate(cluster = case_when(cluster == 7 ~11,"
"0","                               cluster == 9 ~ 7,"
"0","                               cluster == 8 ~ 10,"
"0","                               cluster == 11 ~ 8,"
"0","                               cluster == 10 ~ 9,"
"0","                               TRUE ~ cluster)) %>% "
"0","    arrange(cluster,order) %>% "
"0","    pull(station)"
"0"," "
"0","## Missing dates from deployments ----"
"0",""
"0","missing.days <- read.csv(r""(R:\Science\CetaceanOPPNoise\CetaceanOPPNoise_2\PAM_metadata\missing_dates.csv)"", header= TRUE) %>% "
"0","  mutate(deployment = str_replace_all(deployment,""-"",""_"")) %>% "
"0","  mutate(station= str_extract(deployment, ""^[^_]+"")) %>%"
"0","  mutate(start_missing= as_date(as.character(start_missing)),"
"0","         end_missing= as_date(as.character(end_missing))) %>% "
"0","  rowwise() %>% "
"0","  mutate(miss_days = list(seq.Date(start_missing, end_missing, by = ""day""))) %>% "
"0","  unnest(cols=c(miss_days)) %>%"
"0","  ungroup() %>% "
"0","  select(station, miss_days)"
"0",""
"0",""
"0","## Find all recording dates ----"
"0",""
"0","# find all dates with recording effort"
"0",""
"0","  rec.days <- metadata %>% "
"0","    select(station, rec_start, rec_end) %>% "
"0","    rowwise() %>% "
"0","    mutate(rec_days = list(seq.Date(as_date(rec_start), as_date(rec_end), by = ""day""))) %>% "
"0","    unnest(cols=c(rec_days)) %>%"
"0","    ungroup() %>% "
"0","    anti_join(missing.days, by=c(c(""station""), c(""rec_days""=""miss_days""))) %>% "
"0","    mutate(month = month(rec_days),"
"0","         season= case_when((month == 3|month == 4| month==5) ~ 'SPRING',"
"0","                           (month == 6|month == 7|month == 8) ~ 'SUMMER',"
"0","                           (month == 9|month == 10|month == 11)~ 'FALL',"
"0","                           (month == 12|month == 1|month == 2) ~ 'WINTER'))"
"0",""
"0","## Find all non-recording dates ----"
"0",""
"0","# function to find start and end dates of no recording periods"
"0","detect_consecutive_intervals <- function(dates) {"
"0","  if (length(dates) <= 1) return(data.frame(start_date = dates[1], end_date = dates[1]))"
"0","  "
"0","  intervals <- split(dates, cumsum(c(TRUE, diff(dates) != 1)))"
"0","  intervals <- lapply(intervals, function(x) data.frame(start_date = min(x), end_date = max(x)))"
"0","  return(do.call(rbind, intervals))"
"0","}"
"0",""
"0","# find all dates within effort years  "
"0","all.days <- metadata %>% "
"0","  select(station) %>% "
"0","  rowwise() %>% "
"0","  mutate(all_days = list(seq.Date(as_date(paste(years[1], ""01"", ""01"", sep = ""-"")),as_date(paste(years[length(years)]+1, ""12"", ""31"", sep = ""-"")), by = ""day""))) %>% "
"0","  unnest(cols=c(all_days)) %>% "
"0","  ungroup()"
"0",""
"0","# find the dates with no recording effort"
"0",""
"0","no.rec.dates <- all.days %>% "
"0","  anti_join(rec.days, by = c(c(""station"", c(""all_days""=""rec_days"")))) %>% "
"0","  "
"0","  group_by(station) %>%"
"0","  summarize(consecutive_intervals = list(detect_consecutive_intervals(all_days))) %>%"
"0","  unnest(cols = c(consecutive_intervals)) %>% "
"0","  distinct()"
"0",""
"0","# figure out a darker colour for error bars"
"0","darken_color <- function(color, factor = 0.8) {"
"0","  # Convert hex color to RGB"
"0","  rgb_vals <- col2rgb(color)"
"0","  "
"0","  # Darken each RGB component"
"0","  darkened_rgb <- rgb_vals * factor"
"0","  "
"0","  # Ensure values are within valid range (0-255)"
"0","  darkened_rgb <- pmax(darkened_rgb, 0)"
"0","  darkened_rgb <- pmin(darkened_rgb, 255)"
"0","  "
"0","  # Convert back to hex"
"0","  darkened_hex <- rgb(darkened_rgb[1, ], darkened_rgb[2, ], darkened_rgb[3, ], maxColorValue = 255)"
"0","  "
"0","  return(darkened_hex)"
"0","}"
